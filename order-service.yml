server:
  port: 9002
  shutdown: graceful
  netty:
    connection-timeout: 2s
    idle-timeout: 15s

spring:
  r2dbc:
    username: username
    password: password
    url: r2dbc:postgresql://postgres/polar_orders
    pool:
      max-create-connection-time: 2s
      initial-size: 5
      max-size: 10
  flyway:
    user: ${spring.r2dbc.username}
    password: ${spring.r2dbc.password}
    url: jdbc:postgresql://postgres/polar_orders
  cloud:
    function:
      definition: dispatchOrder
    stream:
      bindings:
        dispatchOrder-in-0:
          destination: order-dispatched
          group: order-service
        acceptedOrder-out-0:
          destination: order-accepted
      rabbit:
        bindings:
          acceptOrder-out-0:
            producer:
              transacted: true
  rabbitmq:
    host: polar-rabbitmq
    port: 5672
    username: guest
    password: guest
    connection-timeout: 5s

app:
  version: "order-api-v1"
  catalogService: "http://catalog-service"

management:
  endpoints.web.exposure.include: refresh

springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: jsl.group.order_service
  pathsToMatch: /**
  cache.disable: true

# TODO: security to be considered later
#  swagger-ui:
#    oauth2-redirect-uri: /swagger-ui/oauth2-redirect.html
#    oauth:
#      clientId:
#      clientSecret:
#      useBasicAuthenticationWithAccessCodeGrant: true